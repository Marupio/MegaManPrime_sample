using System.Collections.Generic;
using UnityEngine;

public class Traits$prefix\$ : ITraits<$type\$, $component_type\$> {
    public DataTypeEnum DataType { get=>DataTypeEnum.$enum\$; }
    public DataTypeEnum ComponentType { get=>DataTypeEnum.$component_enum\$; }
    public bool TestEquals($type\$ lhs, $type\$ rhs) { EqualityComparer<$type\$> ec = EqualityComparer<$type\$>.Default; return ec.Equals(lhs, rhs); }
    public bool TestEqualsComponent($component_type\$ lhs, $component_type\$ rhs) { EqualityComparer<$component_type\$> ec = EqualityComparer<$component_type\$>.Default; return ec.Equals(lhs, rhs); }
    public void SetEqual(ref $type\$ lhs, $type\$ rhs) { $deep_copy\$ }
    public $type\$ Zero { get { $zero_return\$ } }
    public $type\$ Zeroes(int nElems=1) { $zeroes_return\$ }
    public bool HasInfinity { get=>$has_infinity\$; }
    public $type\$ PositiveInfinity { get { $positive_infinity_return\$ } }
    public $type\$ PositiveInfinities(int nElems=1) { $positive_infinities_return\$ }
    public ComponentAccessType PreferredAccessType { get=>ComponentAccessType.$preferred_access_type\$; }
    public bool ElementAccessByIndex { get=>$allow_component_by_index\$; }
    public bool ElementAccessByString { get=>$allow_component_by_string\$; }
    public $component_type\$ GetComponent($type\$ data, int index) { $return_component_by_index\$ }
    public $component_type\$ GetComponent($type\$ data, string elem) { $return_component_by_string\$ }
    public void SetComponent(ref $type\$ data, int index, $component_type\$ value) { $set_component_by_index\$ }
    public void SetComponent(ref $type\$ data, string elem, $component_type\$ value) { $set_component_by_string\$ }
}
