using UnityEngine;
using System.Collections.Generic;

public class $prefix\$SourceDataObj : SourceDataSetObj<$type\$, $component_type\$> {
    public static readonly TraitsSimple$prefix\$ m_traitsSimple = new TraitsSimple$prefix\$();
    public static readonly Traits$prefix\$ m_traits = new Traits$prefix\$();
    public override ITraitsSimple<$type\$> TraitsSimple { get=>m_traitsSimple; }
    public override ITraits<$type\$, $component_type\$> Traits { get=>m_traits; }
    public override DataTypeEnum DataType { get=>DataTypeEnum.$enum\$; }
    public override DataTypeEnum ComponentType { get=>DataTypeEnum.$component_enum\$; }
    public override ComponentAccessType PreferredAccessType { get=>ComponentAccessType.$preferred_access_type\$; }
    public override int NComponents { get=>$n_components\$; }
    public override bool ElementAccessByIndex() { return $allow_component_by_index\$; }
    public override bool ElementAccessByString() { return $allow_component_by_string\$; }
    public override string GetComponentName(int index) { $return_component_name_from_index\$ }
    public override int GetComponentIndex(string elem) { $return_component_index_from_name\$ }
    public override $component_type\$ this[int index] { get { $return_component_by_index\$ } set { $set_component_by_index\$ } }
    public override $component_type\$ this[string elem] { get { $return_component_by_string\$ } set{ $set_component_by_string\$ } }
    public override IObj Clone(IObjRegistry parent) {
        $prefix\$SourceDataObj obj = new $prefix\$SourceDataObj(m_name, parent, m_data);
        return (IObj)obj;
    }
    public $prefix\$SourceDataObj(string name, IObjRegistry parent = null, $type\$ m_data = default($type\$)) : base(name, parent, m_data) {}
    public $prefix\$SourceDataObj($prefix\$SourceDataObj obj) : base(obj) {}
    public $prefix\$SourceDataObj() {}
}
